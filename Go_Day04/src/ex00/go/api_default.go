/*
 * Candy Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
)

func getCandyCost(candyType string) (int32, error) {
	switch candyType {
	case "CE":
		return 10, nil
	case "AA":
		return 15, nil
	case "NT":
		return 17, nil
	case "DE":
		return 21, nil
	case "YR":
		return 23, nil
	default:
		return 0, fmt.Errorf("getCandyCount - wrong candyType %s", candyType)
	}
}
func BuyCandy(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodPost {
		var order Order

		var response interface{}
		err := json.NewDecoder(r.Body).Decode(&order)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			log.Fatal(err)
		}

		cost, err := getCandyCost(order.CandyType)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			response = InlineResponse400{Error_: err.Error()}
		} else if order.Money < 0 {
			w.WriteHeader(http.StatusBadRequest)
			response = InlineResponse400{Error_: "there must be more than zero money"}
		} else if order.CandyCount < 0 {
			w.WriteHeader(http.StatusBadRequest)
			response = InlineResponse400{Error_: "there must be more than zero count"}
		} else {
			sum := cost * order.CandyCount
			if sum > order.Money {
				w.WriteHeader(http.StatusPaymentRequired)
				response = InlineResponse402{Error_: fmt.Sprintf("You need %d more money!", sum-order.Money)}
			} else {
				w.WriteHeader(http.StatusCreated)
				response = InlineResponse201{
					Change: order.Money - sum,
					Thanks: "Thank you!",
				}
			}
		}
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		resp, _ := json.MarshalIndent(response, "", "   ")
		_, _ = w.Write(resp)
	}
}
